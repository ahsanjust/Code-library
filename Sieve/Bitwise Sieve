const int N = 1e6 + 6;
vector<int> primes;
int yo[N / 32];
bool composite(int n, int i) { return (n & (1 << i)); }
int makeit(int n, int i) { return (n | (1 << i)); }
void bitwiseSieve() {
  for (int i = 3; i * i <= N; i += 2) {
    if (!composite(yo[i >> 5], i & 31)) {
      for (int j = i * i; j <= N; j += i * 2) {
        yo[j >> 5] = makeit(yo[j >> 5], j & 31);
      }
    }
  }
  primes.push_back(2);
  for (int i = 3; i <= N; i += 2) {
    if (!composite(yo[i >> 5], i & 31)) {
      primes.push_back(i);
    }
  }
}
bool isprime(int x) {
  if (x == 2) {
    return true;
  }
  if (x < 2 || x % 2 == 0) {
    return false;
  }
  return !composite(yo[x >> 5], x & 31);
}
