#include <bitset>
#include <iostream>
#include <vector>

using namespace std;

struct Node {
  Node *nxt[2] = {nullptr, nullptr};
  bool contain(int bit) { return nxt[bit] != nullptr; }
  void put(int bit, Node *node) { nxt[bit] = node; }
};

class Trie {
private:
  Node *root;

public:
  Trie() { root = new Node(); }

  void insert(const string &s) {
    Node *node = root;
    for (char ch : s) {
      int bit = ch - '0';
      if (!node->contain(bit)) {
        node->put(bit, new Node());
      }
      node = node->nxt[bit];
    }
  }

  int getMaxXOR(const string &s) {
    Node *node = root;
    int res = 0;
    for (char ch : s) {
      int bit = ch - '0';
      int oppositeBit = bit ^ 1;
      if (node->contain(oppositeBit)) {
        res = (res << 1) | 1;
        node = node->nxt[oppositeBit];
      } else {
        res = (res << 1);
        node = node->nxt[bit];
      }
    }
    return res;
  }
};

int maxXOR(int n, int m, vector<int> &arr1, vector<int> &arr2) {
  Trie trie;
  for (auto &num : arr1) {
    string s = bitset<32>(num).to_string();
    trie.insert(s);
  }
  int maxXORValue = 0;
  for (auto &num : arr2) {
    string s = bitset<32>(num).to_string();
    maxXORValue = max(maxXORValue, trie.getMaxXOR(s));
  }
  return maxXORValue;
}

int main() {
  vector<int> arr1 = {1, 2, 3};
  vector<int> arr2 = {4, 5, 6};
  int maxXORValue = maxXOR(arr1.size(), arr2.size(), arr1, arr2);
  cout << "Maximum XOR value: " << maxXORValue << endl;
  return 0;
}
