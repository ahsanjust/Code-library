const int64_t MAX_PRIME = 1000000;
vector<int64_t> primes;
bitset<MAX_PRIME + 1> is_prime;

void sieve() {
  is_prime.set();
  is_prime[0] = is_prime[1] = 0;
  for (int64_t p = 2; p <= MAX_PRIME; ++p) {
    if (is_prime[p]) {
      primes.push_back(p);
      for (int64_t i = p * p; i <= MAX_PRIME; i += p) {
        is_prime[i] = 0;
      }
    }
  }
}

template <typename T> T mul(T a, T b, T mod) { return (__int128(a) * b) % mod; }

template <typename T> T bigmod(T base, T exp, T mod) {
  T result = 1;
  base %= mod;
  while (exp > 0) {
    if (exp & 1)
      result = mul(result, base, mod);
    base = mul(base, base, mod);
    exp >>= 1;
  }
  return result;
}

template <typename T> T optimized_gcd(T a, T b) {
  if (!a || !b)
    return a | b;
  unsigned shift = __builtin_ctz(a | b);
  a >>= __builtin_ctz(a);
  do {
    b >>= __builtin_ctz(b);
    if (a > b) {
      swap(a, b);
    }
    b -= a;
  } while (b);
  return a << shift;
}

template <typename T> bool isprime(T n) {
  if (n < 2 || (n % 6 != 1 && n % 6 != 5)) {
    return n == 2 || n == 3;
  }
  T s = 0, d = n - 1;
  while (d % 2 == 0) {
    d /= 2;
    ++s;
  }
  for (T a : {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41}) {
    if (n == a) {
      return true;
    }
    T x = bigmod(a, d, n);
    if (x == 1 || x == n - 1) {
      continue;
    }
    bool composite = true;
    for (T r = 1; r < s; ++r) {
      x = mul(x, x, n);
      if (x == n - 1) {
        composite = false;
        break;
      }
    }
    if (composite) {
      return false;
    }
  }
  return true;
}

template <typename T> T pollard_rho(T n) {
  auto f = [n](T x) { return (mul(x, x, n) + 1) % n; };
  T x = 2, y = 2, d = 1;
  while (d == 1) {
    x = f(x);
    y = f(f(y));
    d = optimized_gcd(abs(x - y), n);
  }
  return d;
}

template <typename T> void factorize(T n, map<T, int> &factors) {
  for (T p : primes) {
    if (p * p > n) {
      break;
    }
    while (n % p == 0) {
      ++factors[p];
      n /= p;
    }
  }
  if (n > 1) {
    if (isprime(n)) {
      ++factors[n];
    } else {
      T factor = pollard_rho(n);
      factorize(factor, factors);
      factorize(n / factor, factors);
    }
  }
}
