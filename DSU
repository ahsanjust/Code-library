class DSU {
public:
  DSU(int n) : parent(n), rank(n, 0), siz(n, 1) {
    for (int i = 0; i < n; ++i) {
      parent[i] = i;
    }
  }

  int findLeader(int x) {
    if (parent[x] != x) {
      parent[x] = findLeader(parent[x]);
    }
    return parent[x];
  }

  bool unite(int x, int y) {
    int rootX = findLeader(x);
    int rootY = findLeader(y);

    if (rootX != rootY) {
      if (rank[rootX] > rank[rootY]) {
        parent[rootY] = rootX;
        siz[rootX] += siz[rootY];
      } else if (rank[rootX] < rank[rootY]) {
        parent[rootX] = rootY;
        siz[rootY] += siz[rootX];
      } else {
        parent[rootY] = rootX;
        siz[rootX] += siz[rootY];
        ++rank[rootX];
      }
      return true;
    }
    return false;
  }

  int getsize(int x) {
    int leader = findLeader(x);
    return siz[leader];
  }

private:
  vector<int> parent;
  vector<int> rank;
  vector<int> siz;
};
