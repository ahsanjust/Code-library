//https://codeforces.com/contest/1985/problem/H1
#include <bits/stdc++.h>

using namespace std;

#ifndef ONLINE_JUDGE
#include "Ash.cpp"
#else
#define dbg(...)
#define dbgA(...)
#endif

class DSU {
public:
  DSU(int n) : parent(n), rank(n, 0), siz(n, 1) {
    for (int i = 0; i < n; ++i) {
      parent[i] = i;
    }
  }

  int findLeader(int x) {
    if (parent[x] != x) {
      parent[x] = findLeader(parent[x]);
    }
    return parent[x];
  }

  bool unite(int x, int y) {
    int rootX = findLeader(x);
    int rootY = findLeader(y);

    if (rootX != rootY) {
      if (rank[rootX] > rank[rootY]) {
        parent[rootY] = rootX;
        siz[rootX] += siz[rootY];
      } else if (rank[rootX] < rank[rootY]) {
        parent[rootX] = rootY;
        siz[rootY] += siz[rootX];
      } else {
        parent[rootY] = rootX;
        siz[rootX] += siz[rootY];
        ++rank[rootX];
      }
      return true;
    }
    return false;
  }

  int getsize(int x) {
    int leader = findLeader(x);
    return siz[leader];
  }

private:
  vector<int> parent;
  vector<int> rank;
  vector<int> siz;
};

void solve(int cs) {
  int n, m;
  cin >> n >> m;
  vector<vector<char>> g(n, vector<char>(m));
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      cin >> g[i][j];
    }
  }
  DSU dsu(n * m);
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      if (g[i][j] == '#') {
        if (i > 0 && g[i - 1][j] == '#') {
          dsu.unite(i * m + j, (i - 1) * m + j);
        }
        if (j > 0 && g[i][j - 1] == '#') {
          dsu.unite(i * m + j, i * m + j - 1);
        }
      }
    }
  }
  int res = 0;
  for (int i = 0; i < n; i++) {
    set<int> st;
    int cnt = 0;
    for (int j = 0; j < m; j++) {
      if (g[i][j] == '#') {
        st.insert(dsu.findLeader(i * m + j));
      } else {
        cnt += 1;
        if (i > 0 && g[i - 1][j] == '#') {
          st.insert(dsu.findLeader((i - 1) * m + j));
        }
        if (i < n - 1 && g[i + 1][j] == '#') {
          st.insert(dsu.findLeader((i + 1) * m + j));
        }
      }
    }
    for (auto &it : st) {
      cnt += dsu.getsize(it);
    }
    res = max(res, cnt);
  }
  for (int j = 0; j < m; j++) {
    set<int> st;
    int cnt = 0;
    for (int i = 0; i < n; i++) {
      if (g[i][j] == '#') {
        st.insert(dsu.findLeader(i * m + j));
      } else {
        cnt += 1;
        if (j > 0 && g[i][j - 1] == '#') {
          st.insert(dsu.findLeader((i * m + j - 1)));
        }
        if (j < m - 1 && g[i][j + 1] == '#') {
          st.insert(dsu.findLeader(i * m + j + 1));
        }
      }
    }
    for (auto &it : st) {
      cnt += dsu.getsize(it);
    }
    res = max(res, cnt);
  }
  cout << res << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int tc = 1;
  cin >> tc;
  for (int cs = 1; cs <= tc; cs++) {
    solve(cs);
  }
  return 0;
}
