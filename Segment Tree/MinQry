template <typename T> class SegmentTree {
private:
  int n;
  vector<T> tree;

  void build(const vector<T> &arr, int v, int tl, int tr) {
    if (tl == tr) {
      tree[v] = arr[tl];
    } else {
      int tm = (tl + tr) >> 1;
      build(arr, v << 1, tl, tm);
      build(arr, v << 1 | 1, tm + 1, tr);
      tree[v] = min(tree[v << 1], tree[v << 1 | 1]);
    }
  }

  T MinQry(int v, int tl, int tr, int l, int r) {
    if (l > r)
      return numeric_limits<T>::max();
    if (l == tl && r == tr) {
      return tree[v];
    }
    int tm = (tl + tr) >> 1;
    return min(MinQry(v << 1, tl, tm, l, min(r, tm)), MinQry(v << 1 | 1, tm + 1, tr, max(l, tm + 1), r));
  }

  void update(int v, int tl, int tr, int pos, T newVal) {
    if (tl == tr) {
      tree[v] = newVal;
    } else {
      int tm = (tl + tr) >> 1;
      if (pos <= tm) {
        update(v << 1, tl, tm, pos, newVal);
      } else {
        update(v << 1 | 1, tm + 1, tr, pos, newVal);
      }
      tree[v] = min(tree[v << 1], tree[v << 1 | 1]);
    }
  }

public:
  SegmentTree(const vector<T> &arr) {
    n = arr.size();
    tree.resize(4 * n);
    build(arr, 1, 0, n - 1);
  }

  T MinQry(int l, int r) { return MinQry(1, 0, n - 1, l, r); }

  void update(int pos, T newVal) { update(1, 0, n - 1, pos, newVal); }
};
