class SegmentTree {
private:
  vector<int64_t> tree;
  int n;

  void build(const vector<int>& arr, int node, int start, int end) {
    if (start == end) {
      tree[node] = arr[start];
    } else {
      int mid = start + ((end - start) >> 1);
      build(arr, node << 1, start, mid);
      build(arr, node << 1 | 1, mid + 1, end);
      tree[node] = tree[node << 1] + tree[node << 1 | 1];
    }
  }

  void UpdatePoint(int node, int start, int end, int idx, int64_t val) {
    if (start == end) {
      tree[node] += val;
    } else {
      int mid = start + ((end - start) >> 1);
      if (idx <= mid) {
        UpdatePoint(node << 1, start, mid, idx, val);
      } else {
        UpdatePoint(node << 1 | 1, mid + 1, end, idx, val);
      }
      tree[node] = tree[node << 1] + tree[node << 1 | 1];
    }
  }

  int64_t QueryRange(int node, int start, int end, int l, int r) {
    if (start > r || end < l) {
      return 0;
    }
    if (start >= l && end <= r) {
      return tree[node];
    }
    int mid = start + ((end - start) >> 1);
    int64_t leftQuery = QueryRange(node << 1, start, mid, l, r);
    int64_t rightQuery = QueryRange(node << 1 | 1, mid + 1, end, l, r);
    return leftQuery + rightQuery;
  }

  int64_t QueryPoint(int node, int start, int end, int idx) {
    if (start == end) {
      return tree[node];
    }
    int mid = start + ((end - start) >> 1);
    if (idx <= mid) {
      return QueryPoint(node << 1, start, mid, idx);
    } else {
      return QueryPoint(node << 1 | 1, mid + 1, end, idx);
    }
  }

public:
  SegmentTree(int n) {
    tree.resize(4 * n, 0);
  }
  SegmentTree(vector<int>& arr) {
    n = arr.size();
    tree.resize(4 * n, 0);
    build(arr, 1, 0, n - 1);
  }

  void update(int idx, int64_t val) {
    UpdatePoint(1, 0, n - 1, idx, val);
  }

  int64_t queryRange(int l, int r) {
    return QueryRange(1, 0, n - 1, l, r);
  }

  int64_t queryPoint(int idx) {
    return QueryPoint(1, 0, n - 1, idx);
  }
};
