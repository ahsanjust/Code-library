class StrAlgo {
public:
  vector<int> computeLPS(const string &t) {
    int n = t.size();
    vector<int> pi(n, 0);
    int lps = 0;
    for (int q = 1; q < n; q++) {
      while (lps > 0 && t[lps] != t[q]) {
        lps = pi[lps - 1];
      }
      if (t[lps] == t[q]) {
        lps += 1;
      }
      pi[q] = lps;
    }
    return pi;
  }

  vector<int> KMPSearch(const string &text, const string &pattern) {
    vector<int> result;
    vector<int> lps = computeLPS(pattern);

    int i = 0;
    int j = 0;
    while (i < text.size()) {
      if (pattern[j] == text[i]) {
        i++;
        j++;
      }
      if (j == pattern.size()) {
        result.push_back(i - j);
        j = lps[j - 1];
      } else if (i < text.size() && pattern[j] != text[i]) {
        if (j != 0) {
          j = lps[j - 1];
        } else {
          i++;
        }
      }
    }
    return result;
  }

  vector<int> computeZ(const string &s) {
    int n = s.size();
    vector<int> z(n);
    int l = 0, r = 0;
    for (int i = 1; i < n; i++) {
      if (i <= r)
        z[i] = min(r - i + 1, z[i - l]);
      while (i + z[i] < n && s[z[i]] == s[i + z[i]])
        z[i]++;
      if (i + z[i] - 1 > r)
        l = i, r = i + z[i] - 1;
    }
    return z;
  }

  string longestPalindrome(const string &s) {
    int n = s.size();
    if (n == 0)
      return "";

    string t = "#";
    for (int i = 0; i < n; i++) {
      t += s[i];
      t += "#";
    }

    int m = t.size();
    vector<int> p(m, 0);
    int center = 0, right = 0;

    for (int i = 1; i < m - 1; i++) {
      int mirror = 2 * center - i;
      if (right > i)
        p[i] = min(right - i, p[mirror]);

      while (i + 1 + p[i] < m && i - 1 - p[i] >= 0 &&
             t[i + 1 + p[i]] == t[i - 1 - p[i]])
        p[i]++;

      if (i + p[i] > right) {
        center = i;
        right = i + p[i];
      }
    }

    int maxLen = 0;
    int centerIndex = 0;
    for (int i = 1; i < m - 1; i++) {
      if (p[i] > maxLen) {
        maxLen = p[i];
        centerIndex = i;
      }
    }

    return s.substr((centerIndex - maxLen) / 2, maxLen);
  }
};
