string str_addition(string a, string b) {
  if (a.size() < b.size()) {
    while (a.size() != b.size())
      a = "0" + a;
  }
  if (a.size() > b.size()) {
    while (a.size() != b.size())
      b = "0" + b;
  }
  int c = 0;
  int sz = a.size();
  string res;
  for (int i = sz - 1; i >= 0; i--) {
    c += (a[i] - '0') + (b[i] - '0');
    res += (char((c % 10) + '0'));
    c /= 10;
  }
  if (c) {
    res += "1";
  }
  reverse(res.begin(), res.end());
  return res;
}

string str_multiplication(string a, string b) {
  vector<string> multiplied_substrings;
  for (int i = b.size() - 1; i >= 0; i--) {
    int c = 0;
    int x = b[i] - '0';
    string res;
    for (int j = a.size() - 1; j >= 0; j--) {
      c += (x * (a[j] - '0'));
      res += char((c % 10) + '0');
      c /= 10;
    }
    while (c > 0) {
      res += char((c % 10) + '0');
      c /= 10;
    }
    reverse(res.begin(), res.end());
    int p = b.size() - 1 - i;
    for (int j = 0; j < p; ++j) {
      res += "0";
    }
    multiplied_substrings.push_back(res);
  }
  string final_res;
  for (int i = 0; i < (int)multiplied_substrings.size(); i++) {
    final_res = str_addition(final_res, multiplied_substrings[i]);
  }
  return final_res;
}

string str_power(string x, int y) {
  if (y == 0)
    return "1";
  if (y == 1)
    return x;
  if (y % 2)
    return str_multiplication(x, str_power(str_multiplication(x, x), y / 2));
  return str_power(str_multiplication(x, x), y / 2);
}
