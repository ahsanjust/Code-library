const int N = 1e6 + 9;

int power(int64_t n, int64_t k, const int mod) {
  int ans = 1 % mod;
  n %= mod;
  if (n < 0) n += mod;
  while (k) {
    if (k & 1) ans = (int64_t)ans * n % mod;
    n = (int64_t)n * n % mod;
    k >>= 1;
  }
  return ans;
}

const int MOD1 = 127657753, MOD2 = 987654319;
const int p1 = 137, p2 = 277;
int ip1, ip2;
pair<int, int> pw[N], ipw[N];

void prec() {
  pw[0] = {1, 1};
  for (int i = 1; i < N; i++) {
    pw[i].first = 1LL * pw[i - 1].first * p1 % MOD1;
    pw[i].second = 1LL * pw[i - 1].second * p2 % MOD2;
  }
  ip1 = power(p1, MOD1 - 2, MOD1);
  ip2 = power(p2, MOD2 - 2, MOD2);
  ipw[0] = {1, 1};
  for (int i = 1; i < N; i++) {
    ipw[i].first = 1LL * ipw[i - 1].first * ip1 % MOD1;
    ipw[i].second = 1LL * ipw[i - 1].second * ip2 % MOD2;
  }
}

struct Hashing {
  int n;
  string s;
  vector<pair<int, int>> hsF;
  vector<pair<int, int>> hsR;

  Hashing() {}

  Hashing(const string &_s) {
    n = _s.size();
    s = _s;
    hsF.resize(n + 1);
    hsR.resize(n + 1);

    hsF[0] = {0, 0};
    hsR[0] = {0, 0};

    for (int i = 0; i < n; i++) {
      hsF[i + 1].first = (hsF[i].first + 1LL * pw[i].first * s[i] % MOD1) % MOD1;
      hsF[i + 1].second = (hsF[i].second + 1LL * pw[i].second * s[i] % MOD2) % MOD2;
      hsR[i + 1].first = (hsR[i].first + 1LL * pw[i].first * s[n - i - 1] % MOD1) % MOD1;
      hsR[i + 1].second = (hsR[i].second + 1LL * pw[i].second * s[n - i - 1] % MOD2) % MOD2;
    }
  }

  pair<int, int> get_hash(int l, int r) { // 1-indexed
    assert(1 <= l && l <= r && r <= n);
    pair<int, int> ans;
    ans.first = (hsF[r].first - hsF[l - 1].first + MOD1) * 1LL * ipw[l - 1].first % MOD1;
    ans.second = (hsF[r].second - hsF[l - 1].second + MOD2) * 1LL * ipw[l - 1].second % MOD2;
    return ans;
  }

  pair<int, int> get_revhash(int l, int r) { // 1-indexed
    assert(1 <= l && l <= r && r <= n);
    pair<int, int> rev_hash;
    rev_hash.first = (hsR[n - l + 1].first - hsR[n - r].first + MOD1) * 1LL * ipw[n - r].first % MOD1;
    rev_hash.second = (hsR[n - l + 1].second - hsR[n - r].second + MOD2) * 1LL * ipw[n - r].second % MOD2;
    return rev_hash;
  }
};
