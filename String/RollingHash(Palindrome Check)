class RollingHash {
public:
  RollingHash() : front_hash(0), back_hash(0), length(0) {
    precompute_powers(1000006);
  }
  const int MOD = 1'000'000'007;
  const int BASE = 31;

  void initialize(const string &s) {
    length = s.size();
    front_hash = 0;
    back_hash = 0;
    for (size_t i = 0; i < s.size(); i++) {
      front_hash = (front_hash * BASE + (s[i] - 'a' + 1)) % MOD;
      back_hash = (back_hash * BASE + (s[s.size() - i - 1] - 'a' + 1)) % MOD;
    }
  }

  void append(char c, int k) {
    long long added_hash = 0;
    for (int i = 0; i < k; i++) {
      added_hash = (added_hash * BASE + (c - 'a' + 1)) % MOD;
    }
    front_hash = (front_hash * powers[k] + added_hash) % MOD;
    back_hash = (added_hash * powers[length] + back_hash) % MOD;
    length += k;
  }

  void prepend(char c, int k) {
    long long added_hash = 0;
    for (int i = 0; i < k; i++) {
      added_hash = (added_hash * BASE + (c - 'a' + 1)) % MOD;
    }
    front_hash = (added_hash * powers[length] + front_hash) % MOD;
    back_hash = (back_hash * powers[k] + added_hash) % MOD;
    length += k;
  }

  void delete_front(char c) {
    front_hash =
        (front_hash - ((c - 'a' + 1) * powers[length - 1]) % MOD + MOD) % MOD;
    back_hash = (back_hash - ((c - 'a' + 1)) % MOD + MOD) / BASE;
    length -= 1;
  }

  void delete_back(char c) {
    front_hash = (front_hash - ((c - 'a' + 1) + MOD) % MOD) / BASE;
    back_hash =
        (back_hash - ((c - 'a' + 1) * powers[length - 1]) % MOD + MOD) % MOD;
    length -= 1;
  }

  long long getFrontHash() const { return front_hash; }
  long long getBackHash() const { return back_hash; }
  bool is_palindrome() { return front_hash == back_hash; }

private:
  long long front_hash;
  long long back_hash;
  size_t length;
  vector<long long> powers;

  void precompute_powers(size_t new_size) {
    powers.resize(new_size);
    powers[0] = 1;
    for (size_t i = 1; i < new_size; i++) {
      powers[i] = (powers[i - 1] * BASE) % MOD;
    }
  }
};
