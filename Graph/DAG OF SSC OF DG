https://cses.fi/problemset/task/1686/

#include <bits/stdc++.h>
 
using namespace std;
 
#ifndef ONLINE_JUDGE
#include "trace.cpp"
#else
#define dbg(...)
#endif
 
int32_t main() {
  cin.tie(0) -> sync_with_stdio(0);
  int n, m;
  cin >> n >> m;
  vector<vector<int>> g(n), rg(n);
  for (int i = 0; i < m; i++) {
    int u, v;
    cin >> u >> v;
    g[u - 1].push_back(v - 1);
    rg[v - 1].push_back(u - 1);
  }
  stack<int> stk;
  vector<int> vis(n, false);
  auto dfs = [&](auto &&self, int node) -> void {
    vis[node] = true;
    for (auto &son : g[node]) {
      if (!vis[son]) {
        self(self, son);
      }
    }
    stk.push(node);
  };
  for (int i = 0; i < n; i++) {
    if (!vis[i]) {
      dfs(dfs, i);
    }
  }
  vector<int> whichSSC(n, -1);
  auto dfs2 = [&](auto &&self, int node, int which) -> void {
    whichSSC[node] = which;
    for (auto &son : rg[node]) {
      if (whichSSC[son] == -1) {
        self(self, son, which);
      }
    }
  };
  int id = 0;
  while (stk.size()) {
    if (whichSSC[stk.top()] == -1) {
      dfs2(dfs2, stk.top(), id++);
    }
    stk.pop();
  }
  vector<set<int>> G(id);
  for (int i = 0; i < n; i++) {
    for (auto &j : g[i]) {
      if (whichSSC[i] != whichSSC[j]) {
        G[whichSSC[i]].insert(whichSSC[j]);
      }
    }
  }
  queue<int> q;
  int in[id] {};
  for (int i = 0; i < id; i++) {
    for (auto &j : G[i]) {
      in[j] += 1;
    }
  }
  for (int i = 0; i < id; i++) {
    if (in[i] == 0) {
      q.push(i);
    }
  }
  vector<int> topo;
  while (q.size()) {
    int u = q.front(); q.pop(); 
    topo.push_back(u);
    for (auto &v : G[u]) {
      if (--in[v] == 0) {
        q.push(v);
      }
    }
  }
  return 0;
}
