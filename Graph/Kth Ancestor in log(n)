class TreeAncestor {
    vector<vector<int>> up;
    vector<int> depth;
    int log;
public:
    TreeAncestor(int n, vector<int>& parent) {
      log = 0;
      while ((1 << log) <= n) log += 1;
      vector<vector<int>> g(n);
      for (int i = 1; i < n; i++) g[parent[i]].push_back(i);
      up.assign(n, vector<int>(log));
      depth.assign(n, 0);
      auto dfs = [&](auto &&self, int node) -> void {
        for (auto &son : g[node]) {
          depth[son] = depth[node] + 1;
          up[son][0] = node;
          for (int i = 1; i < log; i++) up[son][i] = up[up[son][i - 1]][i - 1];
          self(self, son);
        }
      };
      dfs(dfs, 0);
    }
    
    int getKthAncestor(int node, int k) {
      if (k > depth[node]) return -1;
      for (int i = 0; i < log; i++) if (k >> i & 1) node = up[node][i];
      return node;
    }
};
