https://cses.fi/problemset/task/1137/
/**
 *  Author: AhSaN (JUST-22)
 *  Created: 29-08-2024  13:13:45
 **/
#include <bits/stdc++.h>
 
#pragma GCC optimize("Ofast")
using namespace std;
 
#ifndef ONLINE_JUDGE
#include "Ash.cpp"
#else
#define dbg(...)
#define dbgA(...)
#endif
 
template <class T> class BIT {
  int size;
  vector<T> bit, arr;
 
public:
  BIT(int n) : size(n), bit(n + 5, 0), arr(n + 5, 0) {}
 
  void set(int id, T val) {
    T delta = val - arr[id];
    add(id, delta);
  }
 
  void add(int id, T val) {
    arr[id] += val;
    for (; id <= size; id += id & -id) {
      bit[id] += val;
    }
  }
 
  T pref_sum(int id) const {
    T total = 0;
    for (; id > 0; id -= id & -id) {
      total += bit[id];
    }
    return total;
  }
 
  T range_sum(int L, int R) const { return pref_sum(R) - pref_sum(L - 1); }
};
 
void Sol(int Cs) {
  int n, Q;
  cin >> n >> Q;
  vector<int> a(n);
  for (int i = 0; i < n; i++)
    cin >> a[i];
  vector<vector<int>> g(n);
  for (int i = 1; i < n; i++) {
    int u, v;
    cin >> u >> v;
    --u, --v;
    g[u].push_back(v);
    g[v].push_back(u);
  }
  vector<int> start(n, 0), end(n, 0);
  int timer = 0;
  auto euler = [&](auto &&self, int node, int par) -> void {
    start[node] = ++timer;
    for (auto &son : g[node]) {
      if (son != par)
        self(self, son, node);
    }
    end[node] = timer;
  };
  euler(euler, 0, -1);
 
  BIT<int64_t> fen(n + 1);
  for (int i = 0; i < n; i++) fen.set(start[i], a[i]);
  while (Q--) {
    int t;
    cin >> t;
    if (t == 1) {
      int id, x;
      cin >> id >> x;
      fen.set(start[id - 1], x);
    } else {
      int id;
      cin >> id;
      cout << fen.range_sum(start[id - 1], end[id - 1]) << "\n";
    }
  }
}
 
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int Tc = 1;
  // cin >> Tc;
  for (int Cs = 1; Cs <= Tc; Cs++) {
    Sol(Cs);
  }
  return 0;
}
