https://www.spoj.com/problems/LCASQ/

/**
 *  Author: AhSaN (JUST-22)
 *  Created: 30-08-2024  11:24:34
**/
#include <bits/stdc++.h>
 
#pragma GCC optimize("Ofast")
using namespace std;
 
#ifndef ONLINE_JUDGE
#include "Ash.cpp"
#else
#define dbg(...)
#define dbgA(...)
#endif
 
void Sol(int Cs) {
  int n;
  cin >> n;
  vector<vector<int>> g(n);
  for (int i = 0; i < n; i++) {
    int m;
    cin >> m;
    for (int j = 0; j < m; j++) {
      int u;
      cin >> u;
      g[i].push_back(u);
    }
  }
  int log = 0;
  while ((1 << log) <= n) log += 1;
  vector<int> depth(n, 0);
  vector<vector<int>> up(n, vector<int>(log));
  auto dfs = [&](auto &&self, int node) -> void {
    for (auto &son : g[node]) {
      depth[son] = depth[node] + 1;
      up[son][0] = node;
      for (int i = 1; i < log; i++) up[son][i] = up[up[son][i - 1]][i - 1];
      self(self, son);
    }
  };
  dfs(dfs, 0);
  auto getLCA = [&](int a, int b) -> int {
    if (depth[a] > depth[b]) swap(a, b);
    int k = depth[b] - depth[a];
    for (int i = 0; i < log; i++) {
      if (k >> i & 1) b = up[b][i];
    }
    if (a == b) return a;
    for (int i = log - 1; ~i; --i) {
      if (up[a][i] != up[b][i]) {
        a = up[a][i], b = up[b][i];
      }
    }
    return up[a][0];
  };
  int Q;
  cin >> Q;
  while (Q--) {
    int u, v;
    cin >> u >> v;
    cout << getLCA(u, v) << "\n";
  }
}
 
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int Tc = 1;
  // cin >> Tc;
  for (int Cs = 1; Cs <= Tc; Cs++) {
    Sol(Cs);
  }
  return 0;
} 
