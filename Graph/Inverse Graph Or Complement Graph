https://judge.yosupo.jp/problem/connected_components_of_complement_graph

/**
 *  Author: AhSaN (JUST-22)
 *  Created: 30-08-2024  08:34:27
**/
#include <bits/stdc++.h>

#pragma GCC optimize("Ofast")
using namespace std;

#ifndef ONLINE_JUDGE
#include "Ash.cpp"
#else
#define dbg(...)
#define dbgA(...)
#endif

void Sol(int Cs) {
  int n, m;
  cin >> n >> m;
  vector<unordered_set<int>> g(n);
  for (int i = 0; i < m; i++) {
    int u, v;
    cin >> u >> v;
    g[u].insert(v);
    g[v].insert(u);
  }
  unordered_set<int> work;
  for (int i = 0; i < n; i++) work.insert(i);
  vector<unordered_set<int>> ans;
  while (work.size()) {
    queue<int> Q;
    Q.emplace(*work.begin()), work.erase(work.begin());
    unordered_set<int> now;
    while (Q.size()) {
      int node = Q.front(); Q.pop();
      now.insert(node);
      unordered_set<int> dels;
      for (auto &it : work) {
        if (g[node].count(it) == 0) {
          dels.insert(it), Q.emplace(it);
        }
      }
      for (auto &it : dels) work.erase(it);
    }
    ans.push_back(now);
  }
  cout << ans.size() << "\n";
  for (auto &st : ans) {
    cout << st.size();
    for (auto &it : st) cout << " " << it; cout << "\n";
  }
}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int Tc = 1;
  // cin >> Tc;
  for (int Cs = 1; Cs <= Tc; Cs++) {
    Sol(Cs);
  }
  return 0;
}
