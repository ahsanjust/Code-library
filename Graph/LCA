  int LG = 0;
  while ((1 << LG) <= n) LG += 1;
  vector<int> dep(n, 0);
  vector<vector<int>> up(n, vector<int>(LG, -1));
  auto dfs = [&](auto &&self, int node, int pr = -1) -> void {
    for (auto &son : g[node]) {
      if (son == pr) continue;
      dep[son] = dep[node] + 1;
      up[son][0] = node;
      for (int i = 1; i < LG; i++) {
        int half = up[son][i-1];
        up[son][i] = (half == -1 ? -1 : up[half][i-1]);
      }
      self(self, son, node);
    }
  };
  dfs(dfs, 0);
  auto getLCA = [&](int a, int b) -> int {
    if (dep[a] > dep[b]) swap(a, b);
    int k = dep[b] - dep[a];
    for (int i = 0; i < LG; i++) {
      if (k >> i & 1) b = up[b][i];
    }
    if (a == b) return a;
    for (int i = LG - 1; ~i; --i) {
      if (up[a][i] != up[b][i]) {
        a = up[a][i], b = up[b][i];
      }
    }
    return up[a][0];
  };
