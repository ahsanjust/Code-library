  int LG = 0;
  while ((1 << LG) <= n) LG += 1;
  vector<int> dep(n, 0);
  vector<vector<int>> up(LG, vector<int>(n, -1));
  auto dfs = [&](auto &&self, int node, int pr = -1) -> void {
    for (auto &son : g[node]) {
      if (son == pr) continue;
      dep[son] = dep[node] + 1;
      up[0][son] = node;
      for (int i = 1; i < LG; i++) {
        int half = up[i - 1][son];
        up[i][son] = (half == -1 ? -1 : up[i - 1][half]);
      }
      self(self, son, node);
    }
  };
  dfs(dfs, 0);
  auto getLCA = [&](int a, int b) -> int {
    if (dep[a] > dep[b]) swap(a, b);
    int k = dep[b] - dep[a];
    for (int i = 0; i < LG; i++) {
      if (k >> i & 1) b = up[i][b];
    }
    if (a == b) return a;
    for (int i = LG - 1; ~i; --i) {
      if (up[i][a] != up[i][b]) {
        a = up[i][a], b = up[i][b];
      }
    }
    return up[0][a];
  };
