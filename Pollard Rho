#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <vector>

using namespace std;

template <typename T> class Rho {
public:
  static T mul(T a, T b, T mod) {
    T result = 0;
    a %= mod;
    while (b) {
      if (b & 1)
        result = (result + a) % mod;
      a = (2 * a) % mod;
      b >>= 1;
    }
    return result;
  }

  static T bigmod(T base, T exp, T mod) {
    T result = 1;
    base %= mod;
    while (exp > 0) {
      if (exp & 1)
        result = mul(result, base, mod);
      base = mul(base, base, mod);
      exp >>= 1;
    }
    return result;
  }

  static T gcd(T a, T b) {
    if (!a || !b)
      return a | b;
    unsigned shift = __builtin_ctzll(a | b);
    a >>= __builtin_ctzll(a);
    do {
      b >>= __builtin_ctzll(b);
      if (a > b)
        swap(a, b);
      b -= a;
    } while (b);
    return a << shift;
  }

  static bool isprime(T n) {
    if (n < 2 || n % 6 % 4 != 1)
      return (n | 1) == 3;
    T bases[] = {2, 325, 9375, 28178, 450775, 9780504, 1795265022};
    T s = __builtin_ctzll(n - 1), d = n >> s;
    for (T base : bases) {
      T x = bigmod(base % n, d, n), i = s;
      while (x != 1 && x != n - 1 && base % n && i--)
        x = mul(x, x, n);
      if (x != n - 1 && i != s)
        return false;
    }
    return true;
  }

  static T get_factor(T n) {
    auto f = [n](T x) { return (mul(x, x, n) + 1) % n; };
    T x = 0, y = 0, t = 0, prod = 2, i = 2, q;
    do {
      x = f(x);
      y = f(f(y));
      T diff = x > y ? x - y : y - x;
      prod = mul(prod, diff, n);
      q = gcd(prod, n);
      if (x == y)
        x = ++i, y = f(x);
    } while (t++ % 40 != 0 || q == 1);
    return q;
  }

  static map<T, int> factorize(T n) {
    map<T, int> factors;
    if (n < 2)
      return factors;
    T small_primes[] = {2,  3,  5,  7,  11, 13, 17, 19, 23, 29, 31, 37, 41,
                        43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};
    for (T prime : small_primes) {
      while (n % prime == 0) {
        factors[prime]++;
        n /= prime;
      }
    }
    function<void(T)> decompose = [&](T n) {
      if (n == 1)
        return;
      if (isprime(n)) {
        factors[n]++;
      } else {
        T factor = get_factor(n);
        while (factor == n) {
          factor = get_factor(n);
        }
        decompose(factor);
        decompose(n / factor);
      }
    };
    decompose(n);
    return factors;
  }
};

int main() {
  using NT = Rho<unsigned long long>;
  unsigned long long number = 2000000000009900;
  auto factors = NT::factorize(number);
  cout << "Factors of " << number << ": ";
  for (const auto &the : factors) {
    cout << the.first << "^" << the.second << " ";
  }
  cout << endl;
  return 0;
}
