https://cses.fi/problemset/task/2190

#include <bits/stdc++.h>
 
using namespace std;
 
#ifndef ONLINE_JUDGE
#include "trace.cpp"
#else
#define dbg(...)
#endif
 
struct P {
  int x, y;
  void read() {
    cin >> x >> y;
  }
  P operator - (const P &b) const {
    return P{x - b.x, y - b.y};
  }
  void operator -= (const P &b) {
    x -= b.x, y -= b.y;
  }
  int64_t operator *(const P &b) { // cross product
    return (int64_t)x * b.y - (int64_t)y * b.x;
  }
};
 
void solve(int cs) {
  P p1, p2, p3, p4;
  p1.read(), p2.read(), p3.read(), p4.read();
  if ((p2 - p1) * (p4 - p3) == 0) { // they are parallel
    if ((p2 - p1) * (p3 - p1) != 0) {
      cout << "NO\n";
      return;
    }
    for (int rep = 1; rep <= 2; rep++) {
      if (max(p1.x, p2.x) < min(p3.x, p4.x) || max(p1.y, p2.y) < min(p3.y, p4.y)) {
        cout << "NO\n";
        return;
      }
      swap(p1, p3);
      swap(p2, p4);
    }
    cout << "YES\n";
    return;
  }
  for (int rep = 1; rep <= 2; rep++) {
    int64_t sign1 = (p2 - p1) * (p3 - p1);
    int64_t sign2 = (p2 - p1) * (p4 - p1);
    if ((sign1 < 0 && sign2 < 0) || (sign1 > 0 && sign2 > 0)) {
      cout << "NO\n";
      return;
    }
    swap(p1, p3);
    swap(p2, p4);
  }
  cout << "YES\n";
}
 
int32_t main() {
  cin.tie(0) -> sync_with_stdio(0);
  int t = 1;
  cin >> t;
  for (int i = 1; i <= t; i++) {
    solve(i);
  }
  return 0;
}
