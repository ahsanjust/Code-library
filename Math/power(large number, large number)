https://www.hackerrank.com/challenges/power-of-large-numbers/problem

// we know a^(p - 1) % p == 1 % p, where gcd(a, p) = 1
// from eular theorem we know a^phi(p) == 1 % p, where gcd(a, p) = 1
// here p is prime so, phi(p) = p - 1
// so we can write a^(p - 1) % p = 1 % p
// so from the power we can discard other part except the remainder % p - 1, 
// cause that will contribute nothing!

const int md = 1e9 + 7;

int power(int64_t a, int64_t b) {
  int64_t res = 1;
  while (b) {
    if (b & 1) res = res * a % md;
    a = a * a % md;
    b >>= 1;
  }
  return res;
}

void solve(int cs) {
  string a, b;
  cin >> a >> b;
  int64_t A = 0, B = 0;
  for (int i = 0; i < a.size(); i++) {
    A = (A * 10 + (a[i] - '0')) % md;
  }
  for (int i = 0; i < b.size(); i++) {
    B = (B * 10 + (b[i] - '0')) % (md - 1);
  }
  cout << power(A, B) << "\n";
}
