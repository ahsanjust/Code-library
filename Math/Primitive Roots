Suppose p is a prime and a is an integer such that gcd(p, a) = 1. We say a is a primitive root modulo p is ordp(a) = phi(p) = p - 1.
There are phi(phi(p)) primitive roots of modulo p.

https://www.hackerrank.com/challenges/primitive-problem/problem?isFullScreen=false
#include <bits/stdc++.h>

using namespace std;

int power(int a, int b, int md) {
  int ret = 1;
  while (b) {
    if (b & 1) ret = 1ull * ret * a % md;
    b >>= 1, a = 1ull * a * a % md;
  }
  return ret;
}

int32_t main() {
  cin.tie(0) -> sync_with_stdio(0);
  int p;
  cin >> p;
  int n = p - 1; // phi(p)
  auto backup_n = n;
  vector<int> primes;
  for (int i = 2; i * i <= n; i++) {
    if (n % i == 0) {
      while (n % i == 0) n /= i;
      primes.push_back(i);
    }
  }
  if (n > 1) primes.push_back(n);
  n = backup_n;
  int g = 1; // smallest primitive root
  for(;;++g) {
    bool ok = true;
    for (auto &pr : primes) {
      if (power(g, n / pr, p) == 1) {
        ok = false;
        break;
      }
    }
    if (ok) break;
  } 
  int phi = n; // number of primitive roots modulo p is phi(phi(p))
  for (auto &it : primes) {
    phi -= phi / it;
  }
  cout << g << " " << phi << "\n";
  return 0;
}
