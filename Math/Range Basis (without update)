https://codeforces.com/gym/105974/problem/D

#include <bits/stdc++.h>

using namespace std;

#ifndef ONLINE_JUDGE
#include "trace.cpp"
#else
#define dbg(...)
#endif

const int LG = 61;
int64_t basis[LG];
int when[LG];
void insert(int64_t x, int id) {
  for (int i = LG - 1; ~i; --i) {
    if (~x >> i & 1) continue;
    if (basis[i]) {
      if (when[i] <= id) {
        swap(when[i], id);
        swap(basis[i], x);
      }
      x ^= basis[i];
    } else {
      basis[i] = x;
      when[i] = id;
      return;
    }
  }
}
bool can(int64_t k, int l) {
  for (int i = LG - 1; ~i; --i) {
    if (k >> i & 1) {
      if (when[i] < l) return false;
      k ^= basis[i];
    }
  }
  return k == 0;
}
struct Node {
  int l, r;
  int64_t k;
  int id;
};

int32_t main() {
  cin.tie(0) -> sync_with_stdio(0);
  int n;
  cin >> n;
  vector<int64_t> a(n);
  for (int i = 0; i < n; i++) cin >> a[i];
  int q;
  cin >> q;
  vector<Node> cu(q);
  for (int i = 0; i < q; i++) {
    cin >> cu[i].l >> cu[i].r >> cu[i].k;
    cu[i].id = i;
    --cu[i].l, --cu[i].r;
  }
  sort(cu.begin(), cu.end(), [&](auto &A, auto &B){
    return A.r < B.r;
  });
  int ans[q];
  int R = -1;
  for (auto &[l, r, k, id] : cu) {
    while (R < r) insert(a[++R], R);
    ans[id] = can(k, l);
  }
  for (int i = 0; i < q; i++) {
    cout << (ans[i] ? "Yes\n" : "No\n");
  }
  return 0;
}
