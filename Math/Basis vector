template<typename T = int, int LG = 31>
struct Basis {
  T basis[LG]; int sz;
  Basis() {
    fill(basis, basis + LG, 0), sz = 0;
  }
  void insertVector(T mask) {
    while (mask) {
      int i = 31 - __builtin_clz(mask);
      if (!basis[i]) {
        basis[i] = mask;
        sz++;
        return;
      }
      mask ^= basis[i];
    }
  }
  T maxXor() {
    T ans = 0;
    for (int i = LG - 1; i >= 0; --i) {
      ans = max(ans, ans ^ basis[i]);
    }
    return ans;
  }
  bool can(T x) {
    for (int i = LG - 1; i >= 0; --i) {
      if (x >> i & 1) {
        if (!basis[i]) return false;
        x ^= basis[i];
      }
    }
    return true;
  }
  T kth(T k) {
    T mask = 0;
    int64_t tot = 1LL << sz;
    for (int i = LG - 1; i >= 0; --i) {
      if (basis[i]) {
        int64_t low = tot / 2;
        if ((low < k && (~mask >> i & 1)) || 
          (low >= k && (mask >> i & 1))) {
          mask ^= basis[i];
        } 
        if (low < k) k -= low;
        tot /= 2;
      }
    }
    return mask;
  }
  int size() {
    return sz;
  }
};
