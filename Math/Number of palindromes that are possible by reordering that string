https://www.hackerrank.com/contests/uu-iupc-selection-contest/challenges/the-royal-cipher-challenge-1/problem

#include <bits/stdc++.h>

using namespace std;

#ifndef ONLINE_JUDGE
#include "trace.cpp"
#else
#define dbg(...)
#endif

const int md = 1e9 + 7, N = 1005;
int f[N], inv[N];

int mul(int a, int b) {
  return 1ll * a * b % md;
}

int power(int a, int b) {
  int res = 1;
  while (b) {
    if (b & 1) res = mul(res, a);
    b >>= 1;
    a = mul(a, a);
  }
  return res;
}

void init() {
  inv[0] = f[0] = 1;
  for (int i = 1; i < N; i++) f[i] = mul(f[i - 1], i);
  inv[N - 1] = power(f[N - 1], md - 2);
  for (int i = N - 2; i > 0; --i) inv[i] = mul(inv[i + 1], i + 1);
}

void solve(int cs) {
  string s;
  cin >> s;
  int cnt[26] {};
  for (auto c : s) {
    cnt[c - 'a'] += 1;
  }
  int n = s.size(), odds = 0;
  for (int i = 0; i < 26; i++) {
    odds += cnt[i] & 1;
  }
  if ((n % 2 == 0 && odds > 0) || (n % 2 == 1 && odds > 1)) {
    cout << "0\n";
    return;
  }
  for (int i = 0; i < 26; i++) cnt[i] >>= 1;
  int ans = f[accumulate(cnt, cnt + 26, 0)]; 
  for (int i = 0; i < 26; i++) {
    ans = mul(ans, inv[cnt[i]]);
  }
  cout << ans << "\n";
}

int32_t main() {
  cin.tie(0) -> sync_with_stdio(0);
  int t = 1;
  cin >> t;
  init();
  for (int i = 1; i <= t; i++) {
    solve(i);
  }
  return 0;
}
