/*
 * Polymorphism in Java is the ability to process objects of different types 
 * through a common interface. It allows method calls to behave differently 
 * based on the type of the object.
 *
 * There are two types of polymorphism:
 * 1. Compile-time polymorphism (Method Overloading)
 * 2. Runtime polymorphism (Method Overriding)
 */

 class Calculator {
  int add(int a, int b) {
    return a + b;
  }
  
  double add(double a, double b) {
    return a + b;
  }
  
  int add(int a, int b, int c) {
    return a + b + c;
  }
}

class Animal {
  void sound() {
    System.out.println("Animal makes a sound.");
  }
}

class Dog extends Animal {
  @Override
  void sound() {
    System.out.println("Dog barks.");
  }
}

class Cat extends Animal {
  @Override
  void sound() {
    System.out.println("Cat meows.");
  }
}

public class Main {
  public static void main(String[] args) {
    
    // Demonstrating Compile-time Polymorphism (Method Overloading)
    Calculator calc = new Calculator();
    System.out.println("Addition of two integers: " + calc.add(2, 3)); 
    System.out.println("Addition of two doubles: " + calc.add(2.5, 3.5)); 
    System.out.println("Addition of three integers: " + calc.add(1, 2, 3));

    // Demonstrating Runtime Polymorphism (Method Overriding)
    Animal myAnimal = new Animal();
    Animal myDog = new Dog();
    Animal myCat = new Cat();
    
    // The method called depends on the object type, not the reference type.
    myAnimal.sound();
    myDog.sound();
    myCat.sound();
  }
}
