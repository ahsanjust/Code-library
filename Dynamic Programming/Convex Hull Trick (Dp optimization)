/**
 * KACTL: Line, LineContainer
 * Author: Simon Lindholm
 * Date: 2017-04-20
 * License: CC0
 */

#include <bits/stdc++.h>
using namespace std;

struct Line {
  mutable int64_t m, c, p;
  bool operator<(const Line& o) const { return m < o.m; }
  bool operator<(int64_t x) const { return p < x; }
};

struct LineContainer : multiset<Line, less<>> {
  static const int64_t inf = LLONG_MAX;
  int64_t div(int64_t a, int64_t b) { return a / b - ((a ^ b) < 0 && a % b); }

  bool isect(iterator x, iterator y) {
    if (y == end()) return x->p = inf, 0;
    if (x->m == y->m) x->p = x->c > y->c ? inf : -inf;
    else x->p = div(y->c - x->c, x->m - y->m);
    return x->p >= y->p;
  }

  void add(int64_t m, int64_t c) {
    auto z = insert({m, c, 0}), y = z++, x = y;
    while (isect(y, z)) z = erase(z);
    if (x != begin() && isect(--x, y)) isect(x, y = erase(y));
    while ((y = x) != begin() && (--x)->p >= y->p) isect(x, erase(y));
  }

  int64_t query(int64_t x) {
    assert(!empty());
    auto l = *lower_bound(x);
    return l.m * x + l.c;
  }
};

int main() {
  LineContainer cht;

  // Add some lines y = m*x + c
  cht.add(3, 1);  // y = 3x + 1
  cht.add(2, 5);  // y = 2x + 5

  // Query maximum y for some x
  cout << cht.query(0) << "\n";  // max y at x = 0
  cout << cht.query(1) << "\n";  // max y at x = 1
  cout << cht.query(2) << "\n";  // max y at x = 2

  // To Query minimum y, add lines with negative slopes and intercepts
  LineContainer cht_min;
  cht_min.add(-3, -1);  // y = -3x - 1
  cht_min.add(-2, -5);  // y = -2x - 5

  cout << -cht_min.query(0) << "\n";  // min y at x = 0
}



// original
struct Line {
  mutable int64_t m, c, p;
  bool operator<(const Line& o) const { return m < o.m; }
  bool operator<(int64_t x) const { return p < x; }
};
struct LineContainer : multiset<Line, less<>> {
	// (for doubles, use inf = 1/.0, div(a,b) = a/b)
	static const int64_t inf = LLONG_MAX;
	int64_t div(int64_t a, int64_t b) { return a / b - ((a ^ b) < 0 && a % b); }
	bool isect(iterator x, iterator y) {
		if (y == end()) return x->p = inf, 0;
		if (x->m == y->m) x->p = x->c > y->c ? inf : -inf;
		else x->p = div(y->c - x->c, x->m - y->m);
		return x->p >= y->p;
	}
	void add(int64_t m, int64_t c) {
		auto z = insert({m, c, 0}), y = z++, x = y;
		while (isect(y, z)) z = erase(z);
		if (x != begin() && isect(--x, y)) isect(x, y = erase(y));
		while ((y = x) != begin() && (--x)->p >= y->p) isect(x, erase(y));
	}
	int64_t query(int64_t x) { // return max
		assert(!empty());
		auto l = *lower_bound(x);
		return l.m * x + l.c;
	}
};
