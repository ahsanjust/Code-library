const int N = 1e6 + 2;
vector<int> primes;
int yo[N / 32 + 1];
bool Comp(int n, int i) { return (n & (1 << i)); }
int Doo(int n, int i) { return (n | (1 << i)); }
void sieve() {
  for (int i = 3; i * i < N; i += 2) {
    if (!Comp(yo[i >> 5], i & 31)) {
      for (int j = i * i; j < N; j += i * 2) {
        yo[j >> 5] = Doo(yo[j >> 5], j & 31);
      }
    }
  }
  primes.push_back(2);
  for (int i = 3; i < N; i += 2) {
    if (!Comp(yo[i >> 5], i & 31)) {
      primes.push_back(i);
    }
  }
}
template <typename T> T mul(T a, T b, T mod) { return (__int128(a) * b) % mod; }
template <typename T> T bigmod(T a, T b, T mod) {
  T res = 1, a %= mod;
  while (b > 0) {
    if (b & 1) res = mul(res, a, mod);
    a = mul(a, a, mod), b >>= 1;
  }
  return res;
}
template <typename T> T GCD(T a, T b) {
  if (!a || !b) return a | b;
  unsigned shift = __builtin_ctz(a | b);
  a >>= __builtin_ctz(a);
  do {
    b >>= __builtin_ctz(b);
    if (a > b) swap(a, b);
    b -= a;
  } while (b);
  return a << shift;
}

template <typename T> bool isprime(T n) {
  if (n < 2 || (n % 6 != 1 && n % 6 != 5)) {
    return n == 2 || n == 3;
  }
  T s = 0, d = n - 1;
  while (d % 2 == 0) {
    d /= 2, ++s;
  }
  for (T a : {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41}) {
    if (n == a) return true;
    T x = bigmod(a, d, n);
    if (x == 1 || x == n - 1) continue;
    bool composite = true;
    for (T r = 1; r < s; ++r) {
      x = mul(x, x, n);
      if (x == n - 1) {
        composite = false;
        break;
      }
    }
    if (composite) return false;
  }
  return true;
}

template <typename T> T pollard_rho(T n) {
  auto f = [n](T x) { return (mul(x, x, n) + 1) % n; };
  T x = 2, y = 2, d = 1;
  while (d == 1) {
    x = f(x), y = f(f(y));
    d = GCD(abs(x - y), n);
  }
  return d;
}

template <typename T> void factorize(T n, map<T, int> &factors) {
  for (T p : primes) {
    if (p * p > n) break;
    while (n % p == 0) {
      ++factors[p], n /= p;
    }
  }
  if (n > 1) {
    if (isprime(n)) {
      ++factors[n];
    } else {
      T factor = pollard_rho(n);
      factorize(factor, factors);
      factorize(n / factor, factors);
    }
  }
}
