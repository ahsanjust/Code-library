Given an array of numbers, find out sum of all pair lcm.

f[i] = sum over product (a * b) of tuples with gcd as multiple of i.
g[i] = sum over product (a * b) of tuples with gcd as i.
for (int i = N; i >= 1; --i) {
  g[i] = f[i];
  for (int j = i * 2; j <= N; j += i) {
    g[i] -= g[j];
  }
}

s[i] = sum of all numbers which are divisible by i.
then f[i] = s[i] * s[i];
then the answer is nothing but summation of g[i] / i for all i 1 to N;

https://codeforces.com/gym/101992/problem/D
https://atcoder.jp/contests/agc038/tasks/agc038_c
#include <bits/stdc++.h>

using namespace std;

const int mod = 998244353, N = 1000006;
long long f[N], g[N], dp[N];
long long power(long long a, long long b) {
  long long res = 1;
  while (b) {
    if (b & 1) res = res * a % mod;
    b >>= 1, a = a * a % mod;
  }
  return res;
}

void solve(int cs) {
  int n; cin >> n;
  for (int i = 0; i < n; i++) {
    int x; 
    cin >> x;
    for (int j = 1; j * j <= x; j++) {
      if (x % j == 0) {
        f[j] = (f[j] + x) % mod;
        g[j] = (g[j] + 1LL * x * x % mod) % mod;
        if (j * j != x) {
          f[x / j] = (f[x / j] + x) % mod;
          g[x / j] = (g[x / j] + 1LL * x * x % mod) % mod;
        }
      }
    }
  } 
  for (int i = 1; i < N; i++) {
    f[i] = (f[i] * f[i] % mod - g[i] + mod) % mod;
    f[i] = f[i] * power(2, mod - 2) % mod;
  }
  for (int i = N - 2; i > 0; --i) {
    dp[i] = f[i];
    for (int j = i * 2; j < N; j += i) {
      dp[i] = (dp[i] - dp[j] + mod) % mod;
    }
  }
  long long ans = 0;
  for (int i = 1; i < N; i++) {
    ans = (ans + dp[i] * power(i, mod - 2) % mod) % mod; 
  }
  cout << ans << "\n";
}

int32_t main() {
  ios::sync_with_stdio(0), cin.tie(0);
  int t = 1;
  // cin >> t;
  for (int i = 1; i <= t; ++i) {
    solve(i);
  }
  return 0;
}
