int64_t xor_0_n(int64_t n) {
  if (n % 4 == 0) return n;
  if (n % 4 == 1) return 1;
  if (n % 4 == 2) return n + 1;
  return 0;
}
int64_t xor_range(int64_t l, int64_t r) {
  return xor_0_n(r) ^ xor_0_n(l - 1);
}

int64_t and_range(int64_t l, int64_t r) {
  int b = 0;
  while ((l >> b) ^ (r >> b)) b += 1;
  return (l >> b) << b;
}

int64_t or_range(int64_t l, int64_t r) {
  int b = 0;
  while ((l >> b) ^ (r >> b)) b += 1;
  return r | ((1LL << b) - 1);
}
