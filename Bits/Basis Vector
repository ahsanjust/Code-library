template<typename T = int, int LG = 31>
struct Basis {
  T basis[LG]; int sz;
  Basis() {
    fill(basis, basis + LG, 0), sz = 0;
  }
  void insert(T mask) {
    for (int i = LG - 1; i >= 0; --i) {
      if (mask >> i & 1) {
        if (basis[i]) mask ^= basis[i];
        else {
          basis[i] = mask, ++sz;
          break;
        }
      }
    }
  }
  T maxXor() {
    T ans = 0;
    for (int i = LG - 1; i >= 0; --i) {
      ans = max(ans, ans ^ basis[i]);
    }
    return ans;
  }
  bool can(T x) {
    for (int i = LG - 1; i >= 0; --i) {
      if (x >> i & 1) {
        if (!basis[i]) return false;
        x ^= basis[i];
      }
    }
    return true;
  }
  T kth(T k) {
    T mask = 0;
    int64_t tot = 1LL << sz;
    for (int i = LG - 1; i >= 0; --i) {
      if (basis[i]) {
        int64_t low = tot / 2;
        if ((low < k && (~mask >> i & 1)) || 
          (low >= k && (mask >> i & 1))) {
          mask ^= basis[i];
        } 
        if (low < k) k -= low;
        tot /= 2;
      }
    }
    return mask;
  }
  // number of subsets having xor < x
  T count_lt(T x) {
    if (x < 0) {
      return 0;
    }
    T ans = 0;
    T cnt = ((T)1 << sz);
    T mask = 0;
    for (int i = LG - 1; i >= 0; i--) {
      // at this stage, all prev > i th bits in mask and x are the same
      if (basis[i]) {
        if (x >> i & 1) {
          ans += (cnt >> 1);
          if (!(mask >> i & 1)) {
            mask ^= basis[i];
          }
        } else {
          if (mask >> i & 1) {
            mask ^= basis[i];
          }
        }
        cnt >>= 1;
      } else {
        if ((x >> i & 1) != (mask >> i & 1)) {
          if (x >> i & 1) {
            return ans + cnt;
          } else {
            return ans; 
          }
        }
      }
    }
    return ans;
  }
};
