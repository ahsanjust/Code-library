//https://codeforces.com/blog/entry/68953

const int LG = 20;
struct Node {
  int basis[LG], sz;
  Node() {
    fill(basis, basis + LG, 0), sz = 0;
  }
  Node(int x) {
    fill(basis, basis + LG, 0);
    sz = 0, insertVector(x);
  }
  void insertVector(int mask) {
    for (int i = LG - 1; i >= 0; --i) {
      if (~mask >> i & 1) continue;
      if (!basis[i]) {
        basis[i] = mask, ++sz;
        break;
      }
      mask ^= basis[i];
    }
  }
};

Node* neutral = new Node();

struct ST {
  vector<Node*> t;
  int N;

  ST(int n) : N(n), t(4 * n, neutral) {}
  Node* merge(Node* A, Node *B) {
    if (A == neutral) return B;
    if (B == neutral) return A;
    Node* ret = new Node();
    for (int i = LG - 1; i >= 0; --i) {
      if (A -> basis[i]) ret -> insertVector(A -> basis[i]);
      if (B -> basis[i]) ret -> insertVector(B -> basis[i]);
    }
    return ret;
  }
  void build(int n, int s, int e, vector<int> &a) {
    if (s == e) t[n] = new Node(a[s]);
    else {
      int m = s + e >> 1;
      build(n << 1, s, m, a), build(n << 1 | 1, m + 1, e, a);
      t[n] = merge(t[n << 1], t[n << 1 | 1]);
    }
  }
  void update(int n, int s, int e, int p, int x) {
    if (p < s || p > e) return;
    else if (s == e) t[n] = new Node(x);
    else {
      int m = s + e >> 1;
      update(n << 1, s, m, p, x);
      update(n << 1 | 1, m + 1, e, p, x);
      t[n] = merge(t[n << 1], t[n << 1 | 1]);
    }
  }
  Node* query(int n, int s, int e, int l, int r) {
    if (s > r || l > e || l > r) return neutral;
    if (s >= l && e <= r) return t[n];
    int m = s + e >> 1;
    return merge(query(n << 1, s, m, l, r), query(n << 1 | 1, m + 1, e, l, r));
  }
  Node* query(int l, int r) {
    return query(1, 0, N - 1, l, r);
  }
  void update(int p, int x) {
    update(1, 0, N - 1, p, x);
  }
  void build(vector<int> a) {
    build(1, 0, N - 1, a);
  }
};
