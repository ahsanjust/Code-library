class DSU {
public:
  DSU(int n) : Par(n), rank(n, 0), siz(n, 1), cnt(n) { iota(Par.begin(), Par.end(), 0); }
  int find(int x) { return x == Par[x] ? x : Par[x] = find(Par[x]); }
  bool unite(int x, int y) {
    if ((x = find(x)) == (y = find(y))) return false;
    if (rank[x] < rank[y]) swap(x, y);
    Par[y] = x, siz[x] += siz[y], rank[x] += (rank[x] == rank[y]), cnt -= 1;
    return true;
  }
  int size(int x) { return siz[find(x)]; }
  int numSets() const { return cnt; }
private:
  vector<int> Par, rank, siz;
  int cnt;
};
