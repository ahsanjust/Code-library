struct dsu {
  vector<int> par, rank, sz;
  int cnt;
  dsu(int n) {
    par.resize(n);
    iota(par.begin(), par.end(), 0);
    rank.resize(n, 0);
    sz.resize(n, 1);
    cnt = n;
  }
  int find(int x) {
    return x == par[x] ? x : par[x] = find(par[x]);
  }
  bool unite(int x, int y) {
    x = find(x), y = find(y);
    if (x == y) return false;
    if (rank[x] < rank[y]) swap(x, y);
    par[y] = x, sz[x] += sz[y];
    if (rank[x] == rank[y]) rank[x] += 1;
    --cnt; return true;
  }
  int size(int x) {
    return sz[find(x)];
  }
  int sets() {
    return cnt;
  }
  bool isSame(int x, int y) {
    return find(x) == find(y);
  }
};

// Min Max
class dsu {
public:
  dsu(int n) : Par(n), rank(n, 0), siz(n, 1), Cnt(n), minele(n), maxele(n) {
    for (int i = 0; i < n; i++) {
      Par[i] = i, minele[i] = i, maxele[i] = i;
    }
  }
  int find(int x) { return x == Par[x] ? x : Par[x] = find(Par[x]); }
  bool unite(int x, int y) {
    if ((x = find(x)) == (y = find(y))) return false;
    if (rank[x] < rank[y]) swap(x, y);
    Par[y] = x, siz[x] += siz[y], rank[x] += (rank[x] == rank[y]), Cnt -= 1;
    minele[x] = min(minele[x], minele[y]);
    maxele[x] = max(maxele[x], maxele[y]);
    return true;
  }
  int size(int x) { return siz[find(x)]; }
  int cnt() const { return Cnt; }
  int getmin(int x) { return minele[find(x)]; }
  int getmax(int x) { return maxele[find(x)]; }
private:
  vector<int> Par, rank, siz, minele, maxele;
  int Cnt;
};
