const int N = 500000 * 31 + 5;
const int B = 31;
int tot, trie[N][2], cnt[N];
int newNode() {
  int ptr = ++tot;
  trie[ptr][0] = trie[ptr][1] = cnt[ptr] = 0;
  return ptr;
}
void initTrie() {
  tot = 0; newNode();
}
void insert(int x) {
  int ptr = 1;
  cnt[ptr]++;
  for (int i = B - 1; i >= 0; --i) {
    int d = (x >> i) & 1;
    if (!trie[ptr][d]) trie[ptr][d] = newNode();
    ptr = trie[ptr][d];
    cnt[ptr]++;
  }
}
int query1(int x, int k) { // number of values (val ^ x) < k
  int ptr = 1, ans = 0;
  for (int i = B - 1; i >= 0; --i) {
    if (!ptr) break;
    int d = (x >> i) & 1;
    if ((k >> i) & 1) {
      int child_same = trie[ptr][d];
      if (child_same != 0 && cnt[child_same] > 0) ans += cnt[child_same];
      int next = trie[ptr][!d];
      if (next != 0 && cnt[next] > 0) ptr = next;
      else { ptr = 0; break; }
    } else {
      int next = trie[ptr][d];
      if (next != 0 && cnt[next] > 0) ptr = next;
      else { ptr = 0; break; }
    }
  }
  return ans;
}
int query2(int x, int k) { // number of values (val ^ x) > k
  int ptr = 1, ans = 0;
  for (int i = B - 1; i >= 0; --i) {
    if (!ptr) break;
    int d = (x >> i) & 1;
    if (!((k >> i) & 1)) {
      int child_opposite = trie[ptr][!d];
      if (child_opposite != 0 && cnt[child_opposite] > 0) ans += cnt[child_opposite];
      int next = trie[ptr][d];
      if (next != 0 && cnt[next] > 0) ptr = next;
      else { ptr = 0; break; }
    } else {
      int next = trie[ptr][!d];
      if (next != 0 && cnt[next] > 0) ptr = next;
      else { ptr = 0; break; }
    }
  }
  return ans;
}
int64_t go(int ptr, int b, int x, int t1, int t2) {
  if (!ptr || t1 == 0 || t2 == 2) return 0;
  if ((t1 == 2 && t2 == 0) || b == -1) return cnt[ptr];
  int64_t ret = 0;
  if ((x >> b) & 1) {
    ret += go(trie[ptr][1], b - 1, x, t1 == 1 ? 0 : t1, t2 == 1 ? 0 : t2);
    ret += go(trie[ptr][0], b - 1, x, t1 == 1 ? 2 : t1, t2);
  } else {
    ret += go(trie[ptr][1], b - 1, x, t1, t2 == 1 ? 2 : t2);
    ret += go(trie[ptr][0], b - 1, x, t1, t2);
  }
  return ret;
}
int64_t query3(int x) {  // number of values val <= (val ^ x) <= x
  return go(1, B - 1, x, 1, 1);
}
int get_max(int x) { // max(val ^ x)
  int ptr = 1, ans = 0;
  for (int i = B - 1; i >= 0; --i) {
    if (!ptr) break;
    int d = (x >> i) & 1;
    int prefer = trie[ptr][!d];
    if (prefer != 0 && cnt[prefer] > 0) {
      ptr = prefer;
      ans |= 1 << i;
    } else {
      int other = trie[ptr][d];
      if (other != 0 && cnt[other] > 0) {
        ptr = other;
      } else {
        break;
      }
    }
  }
  return ans;
}
int get_min(int x) { // min(val ^ x)
  int ptr = 1, ans = 0;
  for (int i = B - 1; i >= 0; --i) {
    if (!ptr) break;
    int d = (x >> i) & 1;
    int prefer = trie[ptr][d];
    if (prefer != 0 && cnt[prefer] > 0) {
      ptr = prefer;
    } else {
      int other = trie[ptr][!d];
      if (other != 0 && cnt[other] > 0) {
        ptr = other;
        ans |= 1 << i;
      } else {
        break;
      }
    }
  }
  return ans;
}
void erase(int x) {
  int ptr = 1;
  cnt[ptr]--;
  for (int i = B - 1; i >= 0; --i) {
    int d = (x >> i) & 1;
    ptr = trie[ptr][d];
    cnt[ptr]--;
  }
}
