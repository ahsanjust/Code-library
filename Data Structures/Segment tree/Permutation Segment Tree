// when we have small and fixed set of values (1...K)
// Update (Permutation Map): Given a function p, apply a[i] = p[a[i]] for all i in a range [l, r].
// query : frequency of all elements (1...K)
// https://codeforces.com/group/OseQ3LxgeG/contest/601045/problem/I

#include <bits/stdc++.h>

using namespace std;

#ifndef ONLINE_JUDGE
#include "BugSlayer.cpp"
#else
#define dbg(...)
#endif

struct PST {
  int n, K;
  vector<array<int, 10>> cnt, lazy;
  PST(int _n, int _K) : n(_n), K(_K) {
    cnt.assign(n << 2, {});
    lazy.assign(n << 2, {});
    for (int i = 0; i < n << 2; i++) {
      for (int j = 0; j < K; j++) {
        lazy[i][j] = j;
      }
    }
  }
  void pull(int node) {
    for (int i = 0; i < K; i++) {
      cnt[node][i] = cnt[node << 1][i] + cnt[node << 1 | 1][i];
    }
  }
  void build (const vector<int> &a, int node, int s, int e) {
    if (s == e) cnt[node][a[s]] += 1;
    else {
      int mid = s + e >> 1;
      build(a, node << 1, s, mid);
      build(a, node << 1 | 1, mid + 1, e);
      pull(node);
    }
  }
  void apply(int node, array<int, 10> &p) {
    array<int, 10> ncnt = {};
    for (int i = 0; i < K; i++) {
      ncnt[p[i]] += cnt[node][i];
    }
    swap(cnt[node], ncnt);
    array<int, 10> nlazy;
    for (int i = 0; i < K; i++) {
      nlazy[i] = p[lazy[node][i]];
    }
    swap(lazy[node], nlazy);
  }
  void push(int node) {
    apply(node << 1, lazy[node]);
    apply(node << 1 | 1, lazy[node]);
    for (int i = 0; i < K; i++) {
      lazy[node][i] = i;
    }
  }
  void update(int node, int s, int e, int l, int r, array<int, 10> &p) {
    if (l > e || r < s || r < l) return;
    else if (s >= l && e <= r) {
      apply(node, p);
    } else {
      push(node);
      int mid = s + e >> 1;
      update(node << 1, s, mid, l, r, p);
      update(node << 1 | 1, mid + 1, e, l, r, p);
      pull(node);
    }
  }
  array<int, 10> query(int node, int s, int e, int l, int r) {
    if (l > e || r < s) return {};
    else if (s >= l && e <= r) return cnt[node];
    else {
      push(node);
      int mid = s + e >> 1;
      auto L = query(node << 1, s, mid, l, r);
      auto R = query(node << 1 | 1, mid + 1, e, l, r);
      array<int, 10> ret = {};
      for (int i = 0; i < K; i++) {
        ret[i] = L[i] + R[i];
      }
      return ret;
    }
  }
  void update(int l, int r, const array<int, 10> &p) {
    auto perm = p;
    update(1, 0, n - 1, l, r, perm);
  }
  void build(const vector<int> &a) {
    build(a, 1, 0, n - 1);
  }
  array<int, 10> query(int l, int r) {
    return query(1, 0, n - 1, l, r);
  }
};

const int md = 1e9 + 7;
int mul(int a, int b) {
  return a * 1LL * b % md;
}
int power(int a, int b) {
  a %= md;
  int res = 1;
  while (b > 0) {
    if (b & 1) res = mul(res, a);
    a = mul(a, a), b >>= 1;
  }
  return res;
}

int32_t main() {
  cin.tie(0) -> sync_with_stdio(0);
  int zz;
  cin >> zz;
  while (zz--) {
    int n, q;
    cin >> n >> q;
    vector<int> a(n);
    for (int i = 0; i < n; i++) {
      cin >> a[i], --a[i];
    }
    PST st(n, 10);
    st.build(a);
    while (q--) {
      int t;
      cin >> t;
      int l, r;
      cin >> l >> r, --l, --r;
      if (t == 1) {
        array<int, 10> p;
        for (int i = 0; i < 10; i++) {
          cin >> p[i], --p[i];
        }
        st.update(l, r, p);
      } else {
        auto A = st.query(l, r);
        int ans = 1;
        for (int i = 0; i < 10; i++) {
          ans = mul(ans, power(i + 1, A[i]));
        }
        cout << ans << "\n";
      }
    }
  }
  return 0;
}
