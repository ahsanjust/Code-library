https://toph.co/p/phi-numbers-in-range

/**
 *  Author: AhSaN (JUST-22)
 *  Created: 27-09-2024  15:33:28
**/
#include <bits/stdc++.h>

#pragma GCC optimize("Ofast")
using namespace std;

#ifndef ONLINE_JUDGE
#include "Ash.cpp"
#else
#define dbg(...)
#define dbgA(...)
#endif

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

template<typename T>
using OS = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

const int N = 1e5 + 5;
vector<int> phi(N);
void prec() {
  for (int i = 1; i < N; i++) phi[i] = i;
  for (int i = 2; i < N; i++) {
    if (phi[i] == i) {
      for (int j = i; j < N; j += i) {
        phi[j] -= phi[j] / i;
      }
    }
  }
}

int BS;
struct Qry{
  int l, r, k, id;
  bool operator<(const Qry &other) const {
    return (l / BS < other.l / BS) || (l / BS == other.l / BS && r < other.r);
  }
};

void Sol(int Cs) {
  int n, q;
  cin >> n >> q;
  vector<Qry> Q(q);
  vector<int> ans(q), cnt(N, 0);
  for (int i = 0; i < q; i++) {
    cin >> Q[i].l >> Q[i].r >> Q[i].k;
    Q[i].id = i;
  }
  BS = sqrt(n);
  sort(Q.begin(), Q.end());
  OS<int> S;
  auto del = [&](int i) -> void {
    cnt[phi[i]] -= 1;
    if (cnt[phi[i]] == 0) {
      S.erase(phi[i]);
    }
  };
  auto add = [&](int i) -> void {
    cnt[phi[i]] += 1;
    if (cnt[phi[i]] == 1) {
      S.insert(phi[i]);
    }
  };
  int L = 0, R = -1;
  for (int i = 0; i < q; i++) {
    while (L < Q[i].l) del(L++);
    while (L > Q[i].l) add(--L);
    while (R < Q[i].r) add(++R);
    while (R > Q[i].r) del(R--);
    ans[Q[i].id] = (int(S.size()) < Q[i].k ? -1 : *S.find_by_order(Q[i].k - 1));
  }
  cout << "Case " << Cs << ":\n";
  for (int i = 0; i < q; i++) {
    if (ans[i] == -1) {
      cout << "No Distinct Phi Number\n";
    } else cout << ans[i] << "\n";
  }
}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int Tc = 1;
  cin >> Tc;
  prec();
  for (int Cs = 1; Cs <= Tc; Cs++) {
    Sol(Cs);
  }
  return 0;
}
